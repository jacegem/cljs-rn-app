{"version":3,"sources":["app/index.cljs"],"mappings":"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","names":["app.index/tw","style-str","js/shadow.js.shim.module$tailwind_rn.default","cljs.core.js__GT_clj","js/app","js/app.index","js/app.index.splash-img","app.index/splash-img","js/require","app.index/screen-main","props","reagent.core.as_element","version","app.helpers/<sub","theme-selection","theme","obj61975","k61976","obj61977","applied-science.js-interop.impl/in?*","js/undefined","expo-version","js/shadow.js.shim.module$expo_constants","obj61982","k61983","obj61984","obj61980","k61981","obj61985","obj61978","k61979","obj61986","js/shadow.js.shim.module$react_native.SafeAreaView","js/shadow.js.shim.module$react_native.StatusBar","js/shadow.js.shim.module$react_native_paper.Surface","js/shadow.js.shim.module$react_native.View","js/shadow.js.shim.module$react_native_paper.Card","js/shadow.js.shim.module$react_native_paper.Card.Cover","js/shadow.js.shim.module$react_native_paper.Card.Title","js/shadow.js.shim.module$react_native_paper.Card.Content","js/shadow.js.shim.module$react_native_paper.Paragraph","js/shadow.js.shim.module$react_native_paper.Text","obj61989","k61990","obj61991","obj61987","k61988","obj61992","js/shadow.js.shim.module$react_native_paper.Switch","cljs.core._EQ_","G__61993","app.helpers/>evt","app.index/stack","js/shadow.js.shim.module$$react_navigation$stack.createStackNavigator","app.index/navigator","obj61994","k61995","obj61996","app.index/screen","obj61997","k61998","obj61999","app.index/root","!route-name-ref","cljs.core.atom","!navigation-ref","js/shadow.js.shim.module$react_native_paper.Provider","G__62000","cljs.core/Keyword","js/shadow.js.shim.module$react_native_paper.DefaultTheme","js/shadow.js.shim.module$react_native_paper.DarkTheme","js/shadow.js.shim.module$$react_navigation$native.NavigationContainer","el","cljs.core/reset!","cljs.core.swap_BANG_","cljs.core/merge","obj__51800__auto__","cljs.core/deref","f__51801__auto__","obj62001","k62002","obj62003","prev-route-name","current-route-name","obj62004","k62005","obj62006","cljs.core.not_EQ_","G__62007","js/shadow.js.shim.module$react_native_paper.withTheme","app.index/start","shadow.expo/render-root","app.index/version","obj62012","k62013","obj62014","obj62010","k62011","obj62015","obj62008","k62009","obj62016","app.index/init","re-frame.core/dispatch-sync"],"sourcesContent":["(ns app.index\n  (:require\n   [\"@react-navigation/native\" :as nav]\n   [\"@react-navigation/stack\" :as rn-stack]\n   [\"expo\" :as ex]\n   [\"expo-constants\" :as expo-constants]\n   [\"react\" :as react]\n   [\"react-native\" :as rn]\n   [\"react-native-paper\" :as paper]\n   [\"tailwind-rn\" :default tailwind-rn]\n\n   [applied-science.js-interop :as j]\n   [reagent.core :as r]\n   [re-frame.core :refer [dispatch-sync]]\n   [shadow.expo :as expo]\n\n   [app.fx]\n   [app.handlers]\n   [app.subscriptions]\n   [app.helpers :refer [<sub >evt]]))\n\n(defn tw [style-str]\n  ;; https://github.com/vadimdemedes/tailwind-rn#supported-utilities\n  (-> style-str\n      tailwind-rn\n      (js->clj :keywordize-keys true)))\n\n;; must use defonce and must refresh full app so metro can fill these in\n;; at live-reload time `require` does not exist and will cause errors\n;; must use path relative to :output-dir\n(defonce splash-img (js/require \"../assets/shadow-cljs.png\"))\n\n(defn screen-main [props]\n  (r/as-element\n    (let [version         (<sub [:version])\n          theme-selection (<sub [:theme])\n          theme           (-> props (j/get :theme))\n          expo-version    (-> expo-constants\n                              (j/get :default)\n                              (j/get :manifest)\n                              (j/get :sdkVersion))]\n\n      [:> rn/SafeAreaView {:style (tw \"flex flex-1\")}\n       [:> rn/StatusBar {:visibility \"hidden\"}]\n       [:> paper/Surface {:style (tw \"flex flex-1 justify-center\")}\n        [:> rn/View\n         [:> paper/Card\n          [:> paper/Card.Cover {:source splash-img}]\n          [:> paper/Card.Title {:title    \"My new expo cljs app!\"\n                                :subtitle (str \"Version: \" version)}]\n          [:> paper/Card.Content\n           [:> paper/Paragraph (str \"Using Expo SDK: \" expo-version)]\n           [:> rn/View {:style (tw \"flex flex-row justify-between\")}\n            [:> paper/Text\n             {:style {:color (-> theme\n                                 (j/get :colors)\n                                 (j/get :accent))}}\n             \"Dark mode\"]\n            [:> paper/Switch {:value           (= theme-selection :dark)\n                              :on-value-change #(>evt [:set-theme (if (= theme-selection :dark)\n                                                                    :light\n                                                                    :dark)])}]]]]]]])))\n\n(def stack (rn-stack/createStackNavigator))\n\n(defn navigator [] (-> stack (j/get :Navigator)))\n\n(defn screen [props] [:> (-> stack (j/get :Screen)) props])\n\n(defn root []\n  (let [theme           (<sub [:theme])\n        !route-name-ref (clojure.core/atom {})\n        !navigation-ref (clojure.core/atom {})]\n\n    [:> paper/Provider\n     {:theme (case theme\n               :light paper/DefaultTheme\n               :dark  paper/DarkTheme\n               paper/DarkTheme)}\n\n     [:> nav/NavigationContainer\n      {:ref             (fn [el] (reset! !navigation-ref el))\n       :on-ready        (fn []\n                          (swap! !route-name-ref merge {:current (-> @!navigation-ref\n                                                                     (j/call :getCurrentRoute)\n                                                                     (j/get :name))}))\n       :on-state-change (fn []\n                          (let [prev-route-name    (-> @!route-name-ref :current)\n                                current-route-name (-> @!navigation-ref\n                                                       (j/call :getCurrentRoute)\n                                                       (j/get :name))]\n                            (when (not= prev-route-name current-route-name)\n                              ;; This is where you can do side effecty things like analytics\n                              (>evt [:some-fx-example (str \"New screen encountered \" current-route-name)]))\n                            (swap! !route-name-ref merge {:current current-route-name})))}\n\n      [:> (navigator) {:header-mode \"none\"}\n       (screen {:name      \"Screen1\"\n                :component (paper/withTheme screen-main)})]]]))\n\n(defn start\n  {:dev/after-load true}\n  []\n  (expo/render-root (r/as-element [root])))\n\n(def version (-> expo-constants\n                 (j/get :default)\n                 (j/get :manifest)\n                 (j/get :version)))\n\n(defn init []\n  (dispatch-sync [:initialize-db])\n  (dispatch-sync [:set-version version])\n  (start))\n"]}
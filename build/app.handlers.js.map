{"version":3,"sources":["app/handlers.cljs"],"mappings":";AASA;;;AAAA,AAAMA,AAEHC,AAAKC,AAAGC;AAFX,AAGE,AAAU,AAACC,AAASH,AAAKC;AAAzB;;AAAA,AACE,AAACG,AAAKF;;AACN,AAAMG,AAAY,AAACC,AAAcN,AAAKC;AAAtC,AACE,AAAO,AAAA,AAA2BI;;AADpC;;;AAIJ,AAAA,AAAME,AAAeC;AAArB,AACE,AAAMP,AAAO,AAAA,AAAA,AAAA,AAAIO;AACXC,AAAO,AAAA,AAAA,AAAA,AAAID;AACXN,AAAO,AAAA,AAAA,AAAA,AAAIM;AAFjB,AAIE,AAAI,AAAA,AAAA,AAAO,AAACT,AAAgBW,AAAYT,AAAGC;AACzC,AAAA,AAAA,AAAA,AAACS,AAASH,AAAuBC;;AAGjCD;;;AAEN,AAAKI,AACH,AAAIC,AACF,AAAA,AAAA,AAAA,AAACC,AAEQP,AACTQ;AAEJ,AAAA,AAAKC,AACoBJ;AAEzB,AAAA,AAAMK,AAAeC,AAAEA;AAAvB,AACEC;;AAEF,AAAA,AAAAC,AAAMG,AAAWtB;AAAjB,AAAA,AAAAoB,AAAAD;AAAA,AAAAE,AAAAD,AAAA,AAAA,AAAqBH;AAArB,AAAAI,AAAAD,AAAA,AAAA,AAAuBG;AAAvB,AAEO,AAAAC,AAAA,AAAAC,AAAAC;AAAAD,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAE,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAF,AAAAC;;AAAAA;AAAAF;AAAAI,AAAA,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAAP;AAAA,AAAA,AAAAM;AAAA,AAAAE,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAJ,AAAAA,AAAAI,AAAAJ,AAAAI;;AAAAJ;;AADA7B,AAC2BuB;;AAElC,AAAA,AAAAW,AAAME,AAAapC;AAAnB,AAAA,AAAAmC,AAAAD;AAAA,AAAAb,AAAAc,AAAA,AAAA,AAAuBlB;AAAvB,AAAAI,AAAAc,AAAA,AAAA,AAAyBE;AAAzB,AAEO,AAAAb,AAAA,AAAAC,AAAAa;AAAAb,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAc,AAAA,AAAAX,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAU,AAAAC;;AAAAA;AAAAd;AAAAe,AAAA,AAAAV,AAAAL;AAAAM,AAAA,AAAAC,AAAAP;AAAA,AAAA,AAAAM;AAAA,AAAAU,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAD,AAAAA,AAAAC,AAAAD,AAAAC;;AAAAD;;AADAxC,AACmBqC;;AAE1B,AAAA,AAAAK,AAAME,AAAiBC;AAAvB,AAAA,AAAAF,AAAAD;AAAA,AAAArB,AAAAsB,AAAA,AAAA,AAA6B1B;AAA7B,AAAAI,AAAAsB,AAAA,AAAA,AAA+BG;AAA/B,AAAA,AAAA,AAAA,AACoB,AAAA,AAAKD,AACLC;;AAEpB,AAAA,AAAA,AAACC,AAA6BhC,AAAmBC;AACjD,AAAA,AAAA,AAAC+B,AAAyBhC,AAAmBO;AAC7C,AAAA,AAAA,AAACyB,AAA2BhC,AAAmBqB;AAC/C,AAAA,AAAA,AAACY,AAA+BjC,AAAmB6B","names":["app.handlers/check-and-throw","spec","db","event","cljs.spec.alpha.valid_QMARK_","cljs.core/tap>","explanation","cljs.spec.alpha/explain-str","app.handlers/validate-spec","context","old-db","app.db/app-db-spec","cljs.core/assoc-in","app.handlers/spec-validation","js/goog.DEBUG","re_frame.core.__GT_interceptor","re-frame.core/->interceptor","app.handlers/base-interceptors","app.handlers/initialize-db","_","app.db/default-app-db","p__58973","vec__58974","cljs.core.nth","app.handlers/set-theme","theme","com.rpl.specter.impl/compiled-setval*","info__54731__auto__","app.handlers/pathcache58977","info58978","com.rpl.specter.impl/magic-precompilation","precompiled58979","com.rpl.specter.impl/cached-path-info-precompiled","dynamic?__54732__auto__","com.rpl.specter.impl/cached-path-info-dynamic?","G__58980","p__58981","vec__58982","app.handlers/set-version","version","app.handlers/pathcache58985","info58986","precompiled58987","G__58988","p__58989","vec__58990","app.handlers/some-fx-example","cofx","x","re_frame.core.reg_event_db","re_frame.core.reg_event_fx"],"sourcesContent":["(ns app.handlers\n  (:require\n   [re-frame.core :refer [reg-event-db\n                          ->interceptor\n                          reg-event-fx]]\n   [com.rpl.specter :as sp :refer [setval]]\n   [clojure.spec.alpha :as s]\n   [app.db :as db :refer [default-app-db app-db-spec]]))\n\n(defn check-and-throw\n  \"Throw an exception if db doesn't have a valid spec.\"\n  [spec db event]\n  (when-not (s/valid? spec db)\n    (tap> event)\n    (let [explanation (s/explain-str spec db)]\n      (throw (str \"Spec check failed: \" explanation))\n      true)))\n\n(defn validate-spec [context]\n  (let [db     (-> context :effects :db)\n        old-db (-> context :coeffects :db)\n        event  (-> context :coeffects :event)]\n\n    (if (some? (check-and-throw app-db-spec db event))\n      (assoc-in context [:effects :db] old-db)\n      ;; put the old db back as the new db when check fails\n      ;; otherwise return context unchanged\n      context)))\n\n(def spec-validation\n  (if goog.DEBUG\n    (->interceptor\n      :id :spec-validation\n      :after validate-spec)\n    ->interceptor))\n\n(def base-interceptors  [;; (when ^boolean goog.DEBUG debug) ;; use this for some verbose re-frame logging\n                         spec-validation])\n\n(defn initialize-db [_ _]\n  default-app-db)\n\n(defn set-theme [db [_ theme]]\n  (->> db\n       (setval [:settings :theme] theme)))\n\n(defn set-version [db [_ version]]\n  (->> db\n       (setval [:version] version)))\n\n(defn some-fx-example [cofx [_ x]]\n  {:db              (:db cofx)\n   :some-fx-example x})\n\n(reg-event-db :initialize-db [base-interceptors] initialize-db)\n(reg-event-db :set-theme [base-interceptors] set-theme)\n(reg-event-db :set-version [base-interceptors] set-version)\n(reg-event-fx :some-fx-example [base-interceptors] some-fx-example)\n"]}